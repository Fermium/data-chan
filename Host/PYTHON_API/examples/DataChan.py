# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_DataChan')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_DataChan')
    _DataChan = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_DataChan', [dirname(__file__)])
        except ImportError:
            import _DataChan
            return _DataChan
        try:
            _mod = imp.load_module('_DataChan', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _DataChan = swig_import_helper()
    del swig_import_helper
else:
    import _DataChan
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class datachan_device_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, datachan_device_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, datachan_device_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mutex_attr"] = _DataChan.datachan_device_t_mutex_attr_set
    __swig_getmethods__["mutex_attr"] = _DataChan.datachan_device_t_mutex_attr_get
    if _newclass:
        mutex_attr = _swig_property(_DataChan.datachan_device_t_mutex_attr_get, _DataChan.datachan_device_t_mutex_attr_set)
    __swig_setmethods__["handler_mutex"] = _DataChan.datachan_device_t_handler_mutex_set
    __swig_getmethods__["handler_mutex"] = _DataChan.datachan_device_t_handler_mutex_get
    if _newclass:
        handler_mutex = _swig_property(_DataChan.datachan_device_t_handler_mutex_get, _DataChan.datachan_device_t_handler_mutex_set)
    __swig_setmethods__["measures_queue_mutex"] = _DataChan.datachan_device_t_measures_queue_mutex_set
    __swig_getmethods__["measures_queue_mutex"] = _DataChan.datachan_device_t_measures_queue_mutex_get
    if _newclass:
        measures_queue_mutex = _swig_property(_DataChan.datachan_device_t_measures_queue_mutex_get, _DataChan.datachan_device_t_measures_queue_mutex_set)
    __swig_setmethods__["exitlock"] = _DataChan.datachan_device_t_exitlock_set
    __swig_getmethods__["exitlock"] = _DataChan.datachan_device_t_exitlock_get
    if _newclass:
        exitlock = _swig_property(_DataChan.datachan_device_t_exitlock_get, _DataChan.datachan_device_t_exitlock_set)
    __swig_setmethods__["enabled_mutex"] = _DataChan.datachan_device_t_enabled_mutex_set
    __swig_getmethods__["enabled_mutex"] = _DataChan.datachan_device_t_enabled_mutex_get
    if _newclass:
        enabled_mutex = _swig_property(_DataChan.datachan_device_t_enabled_mutex_get, _DataChan.datachan_device_t_enabled_mutex_set)
    __swig_setmethods__["requests_queue_mutex"] = _DataChan.datachan_device_t_requests_queue_mutex_set
    __swig_getmethods__["requests_queue_mutex"] = _DataChan.datachan_device_t_requests_queue_mutex_get
    if _newclass:
        requests_queue_mutex = _swig_property(_DataChan.datachan_device_t_requests_queue_mutex_get, _DataChan.datachan_device_t_requests_queue_mutex_set)
    __swig_setmethods__["handler"] = _DataChan.datachan_device_t_handler_set
    __swig_getmethods__["handler"] = _DataChan.datachan_device_t_handler_get
    if _newclass:
        handler = _swig_property(_DataChan.datachan_device_t_handler_get, _DataChan.datachan_device_t_handler_set)
    __swig_setmethods__["measures_queue"] = _DataChan.datachan_device_t_measures_queue_set
    __swig_getmethods__["measures_queue"] = _DataChan.datachan_device_t_measures_queue_get
    if _newclass:
        measures_queue = _swig_property(_DataChan.datachan_device_t_measures_queue_get, _DataChan.datachan_device_t_measures_queue_set)
    __swig_setmethods__["reader"] = _DataChan.datachan_device_t_reader_set
    __swig_getmethods__["reader"] = _DataChan.datachan_device_t_reader_get
    if _newclass:
        reader = _swig_property(_DataChan.datachan_device_t_reader_get, _DataChan.datachan_device_t_reader_set)
    __swig_setmethods__["reader_attr"] = _DataChan.datachan_device_t_reader_attr_set
    __swig_getmethods__["reader_attr"] = _DataChan.datachan_device_t_reader_attr_get
    if _newclass:
        reader_attr = _swig_property(_DataChan.datachan_device_t_reader_attr_get, _DataChan.datachan_device_t_reader_attr_set)
    __swig_setmethods__["enabled"] = _DataChan.datachan_device_t_enabled_set
    __swig_getmethods__["enabled"] = _DataChan.datachan_device_t_enabled_get
    if _newclass:
        enabled = _swig_property(_DataChan.datachan_device_t_enabled_get, _DataChan.datachan_device_t_enabled_set)
    __swig_setmethods__["requests_queue"] = _DataChan.datachan_device_t_requests_queue_set
    __swig_getmethods__["requests_queue"] = _DataChan.datachan_device_t_requests_queue_get
    if _newclass:
        requests_queue = _swig_property(_DataChan.datachan_device_t_requests_queue_get, _DataChan.datachan_device_t_requests_queue_set)

    def __init__(self):
        this = _DataChan.new_datachan_device_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DataChan.delete_datachan_device_t
    __del__ = lambda self: None
datachan_device_t_swigregister = _DataChan.datachan_device_t_swigregister
datachan_device_t_swigregister(datachan_device_t)


def datachan_device_setup(native_handle):
    return _DataChan.datachan_device_setup(native_handle)
datachan_device_setup = _DataChan.datachan_device_setup

def datachan_device_cleanup(dev):
    return _DataChan.datachan_device_cleanup(dev)
datachan_device_cleanup = _DataChan.datachan_device_cleanup
uninitialized = _DataChan.uninitialized
not_found_or_inaccessible = _DataChan.not_found_or_inaccessible
cannot_claim = _DataChan.cannot_claim
malloc_fail = _DataChan.malloc_fail
unknown = _DataChan.unknown
success = _DataChan.success
class datachan_acquire_result_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, datachan_acquire_result_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, datachan_acquire_result_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["result"] = _DataChan.datachan_acquire_result_t_result_set
    __swig_getmethods__["result"] = _DataChan.datachan_acquire_result_t_result_get
    if _newclass:
        result = _swig_property(_DataChan.datachan_acquire_result_t_result_get, _DataChan.datachan_acquire_result_t_result_set)
    __swig_setmethods__["device"] = _DataChan.datachan_acquire_result_t_device_set
    __swig_getmethods__["device"] = _DataChan.datachan_acquire_result_t_device_get
    if _newclass:
        device = _swig_property(_DataChan.datachan_acquire_result_t_device_get, _DataChan.datachan_acquire_result_t_device_set)

    def __init__(self):
        this = _DataChan.new_datachan_acquire_result_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _DataChan.delete_datachan_acquire_result_t
    __del__ = lambda self: None
datachan_acquire_result_t_swigregister = _DataChan.datachan_acquire_result_t_swigregister
datachan_acquire_result_t_swigregister(datachan_acquire_result_t)

USB_USED_INTERFACE = _DataChan.USB_USED_INTERFACE
USB_IN_ENDPOINT = _DataChan.USB_IN_ENDPOINT
USB_OUT_ENDPOINT = _DataChan.USB_OUT_ENDPOINT
TIMEOUT_MS = _DataChan.TIMEOUT_MS

def datachan_is_initialized():
    return _DataChan.datachan_is_initialized()
datachan_is_initialized = _DataChan.datachan_is_initialized

def datachan_init():
    return _DataChan.datachan_init()
datachan_init = _DataChan.datachan_init

def datachan_shutdown():
    return _DataChan.datachan_shutdown()
datachan_shutdown = _DataChan.datachan_shutdown

def datachan_device_acquire():
    return _DataChan.datachan_device_acquire()
datachan_device_acquire = _DataChan.datachan_device_acquire

def datachan_device_release(arg1):
    return _DataChan.datachan_device_release(arg1)
datachan_device_release = _DataChan.datachan_device_release

def datachan_device_enable(arg1):
    return _DataChan.datachan_device_enable(arg1)
datachan_device_enable = _DataChan.datachan_device_enable

def datachan_device_is_enabled(arg1):
    return _DataChan.datachan_device_is_enabled(arg1)
datachan_device_is_enabled = _DataChan.datachan_device_is_enabled

def datachan_device_disable(arg1):
    return _DataChan.datachan_device_disable(arg1)
datachan_device_disable = _DataChan.datachan_device_disable

def datachan_enqueue_request(arg1, arg2):
    return _DataChan.datachan_enqueue_request(arg1, arg2)
datachan_enqueue_request = _DataChan.datachan_enqueue_request

def datachan_dequeue_request(arg1, arg2):
    return _DataChan.datachan_dequeue_request(arg1, arg2)
datachan_dequeue_request = _DataChan.datachan_dequeue_request

def datachan_send_sync_command(arg1, arg2, arg3, arg4):
    return _DataChan.datachan_send_sync_command(arg1, arg2, arg3, arg4)
datachan_send_sync_command = _DataChan.datachan_send_sync_command

def datachan_device_enqueue_measure(arg1, arg2):
    return _DataChan.datachan_device_enqueue_measure(arg1, arg2)
datachan_device_enqueue_measure = _DataChan.datachan_device_enqueue_measure

def datachan_device_dequeue_measure(arg1):
    return _DataChan.datachan_device_dequeue_measure(arg1)
datachan_device_dequeue_measure = _DataChan.datachan_device_dequeue_measure

def datachan_device_enqueued_measures(arg1):
    return _DataChan.datachan_device_enqueued_measures(arg1)
datachan_device_enqueued_measures = _DataChan.datachan_device_enqueued_measures

def datachan_device_set_config(arg1, arg2, arg3, arg4, arg5):
    return _DataChan.datachan_device_set_config(arg1, arg2, arg3, arg4, arg5)
datachan_device_set_config = _DataChan.datachan_device_set_config
# This file is compatible with both classic and new-style classes.


